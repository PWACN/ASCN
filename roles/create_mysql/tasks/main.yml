---

- name: Create Compute Disk
  google.cloud.gcp_compute_disk:
    name: "{{ gcp_disk_name }}"
    size_gb: "{{ gcp_disk_size }}"
    zone: "{{ gcp_zone }}"
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_auth_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present

- name: Create Storage Class 
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: StorageClass
      metadata:
        name: "{{ storage_class_name }}"
        namespace: default
      provisioner: kubernetes.io/gce-pd
      volumeBindingMode: WaitForFirstConsumer
      allowVolumeExpansion: false
      reclaimPolicy: Retain
      parameters:
        type: pd-standard
        fstype: ext4
        replication-type: none

- name: Create mysql PV
  kubernetes.core.k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: PersistentVolume
      metadata:
        name: "{{ mysql_pv_name }}"
      spec:
        storageClassName: "{{ storage_class_name }}"
        capacity:
          storage: 5Gi
        accessModes:
          - ReadWriteOnce
        claimRef:
          namespace: default
          name: "{{ mysql_pv_claim_name }}"
        gcePersistentDisk:
          pdName: "{{ gcp_disk_name }}"
          fsType: ext4

- name: Create mysql PVC
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ mysql_pv_claim_name }}"
        namespace: default
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 4Gi
        storageClassName: "{{ storage_class_name }}"

- name: Create mysql Pod
  kubernetes.core.k8s:  
    state: present
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: "{{ mysql_deployment_name }}"
        namespace: default
        labels:
          app: mysql
          tier: database
      spec:
        selector:
          matchLabels:
            app: mysql
        template:
          metadata:
            labels:
              app: mysql
              tier: database
          spec:
            containers:
            - name: mysql
              image: mysql:latest
              env: 
              - name: MYSQL_ALLOW_EMPTY_PASSWORD
                value: "true"
              - name: MYSQL_DATABASE
                value: "{{ mysql_database_name }}"
              - name: MYSQL_USER
                value: "{{ mysql_database_user }}"
              - name: MYSQL_PASSWORD
                value: "{{ mysql_database_password }}"
              ports:
              - containerPort: "{{ mysql_port }}"
              volumeMounts:
              - name: "{{ mysql_pv_name }}"
                mountPath: /var/lib/mysql
            volumes:
            - name: "{{ mysql_pv_name }}"
              persistentVolumeClaim:
                claimName: "{{ mysql_pv_claim_name }}"

#- name: Get Mysql Pods
#  kubernetes.core.k8s_info:
#    api_version: v1
#    kind: Pod
#    label_selectors:
#      - app = mysql
#    namespace: default
#  register: pods_info
#
#- name: Wait for all Mysql Pods
#  ansible.builtin.pause:
#    seconds: 5
#  when: item.status.phase != "Running"
#  retries: 10
#  loop: "{{ pods_info.resources}}"

- name: Create Mysql Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ mysql_service_name }}"
        namespace: default
        labels:
          app: mysql
          tier: database
      spec:
        type: ClusterIP
        selector:
          app: mysql
        ports:
          - targetPort: "{{ mysql_port }}" 
            port: "{{ mysql_port }}" 